#!/usr/bin/env perl
# Copyright (c) 2009, Maximilian GaÃŸ <mxey@ghosthacking.net>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
use 5.10.0;
use autodie qw(:all);
use AnyEvent::Handle;
use AnyEvent::IRC::Client;
use AnyEvent::Socket;
use Config::Tiny;
use IO::Handle;

sub log_info {
    my($msg) = @_;
    say $msg;
}

my $profile;
if (@ARGV == 0) {
    $profile = 'default';
}
elsif (@ARGV == 1) {
    $profile = shift @ARGV;
}
else {
    STDERR->say("Usage: $0 [PROFILE]");
    STDERR->say('If PROFILE is missing, default is assumed.');
    exit 1;
}

my $config_all = Config::Tiny->read('happyman.conf')
  or die $Config::Tiny::errstr;
my $Config = $config_all->{$profile}
  or die "Config section $profile missing";

foreach (qw(server channel nick user ircname listen_addr listen_port)) {
    if (!defined $Config->{$_}) {
        die "Config key $_ missing";
    }
}

my $irc = new AnyEvent::IRC::Client;

sub announce {
    my($host, $handle, $line) = @_;
    $irc->send_chan($Config->{channel}, 'PRIVMSG', $Config->{channel}, $line);
    log_info("Announcing message from $host: $line");
    $handle->push_read(line => sub {
        announce($host, @_);
    });
}

tcp_server($Config->{listen_addr}, $Config->{listen_port}, sub {
    my($fh, $host, $port) = @_;
    if (!$fh) {
        warn "Server failure: $!";
        return;
    }
    my $handle;
    $handle = new AnyEvent::Handle(
        fh => $fh,
        on_eof => sub { undef $handle },
        on_error => sub { undef $handle },
    );
    $handle->push_read(line => sub {
        announce($host, @_);
    });
});

$irc->reg_cb(
    connect => sub {
        my($irc, $err) = @_;
        if ($err) {
            die "Connecting to IRC failed: $err";
        }
    },
    disconnect => sub {
        my($irc, $reason) = @_;
        print "Disconnect: $reason\n";
        exit;
    },
);

$irc->send_srv('JOIN', $Config->{channel});
if ($Config->{ssl}) {
  $irc->enable_ssl;
}
$irc->connect($Config->{server}, $Config->{port} || 6667, {
    nick => $Config->{nick},
    user => $Config->{user},
    real => $Config->{ircname},
});

AnyEvent->condvar->wait;
